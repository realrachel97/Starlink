{"ast":null,"code":"import { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\nimport { default as matrix, multiply, inverse } from \"./matrix.js\"; // Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n\nexport default function (root, face) {\n  recurse(root, {\n    transform: null\n  });\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face); // Find shared edge.\n\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m; // Replace shared edge in parent edges array.\n\n      var edges = parent.edges;\n\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n\n      edges = node.edges;\n\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n\n    if (node.children) {\n      node.children.forEach(function (child) {\n        recurse(child, node);\n      });\n    }\n\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n\n    if (t = node.transform) {\n      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];\n    }\n\n    point[1] = -point[1];\n    return point;\n  } // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n\n\n  if (hasInverse(root)) forward.invert = function (x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n\n    if (t) {\n      t = inverse(t);\n      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];\n    }\n\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function (stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {\n    type: \"MultiPoint\",\n    coordinates: node.face\n  },\n      notPoles = node.face.filter(function (d) {\n    return abs(d[1]) !== 90;\n  }),\n      b = bounds({\n    type: \"MultiPoint\",\n    coordinates: notPoles\n  }),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0]; // TODO\n\n  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : centroid(multiPoint); // First find the shared edgeâ€¦\n\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n} // Tests equality of two spherical points.\n\n\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // Finds a shared edge given two clockwise polygons.\n\n\nfunction sharedEdge(a, b) {\n  var x,\n      y,\n      n = a.length,\n      found = null;\n\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n} // Converts an array of n face vertices to an array of n + 1 edges.\n\n\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n\n  for (var a = face[n - 1], i = 0; i < n; ++i) {\n    edges.push([a, a = face[i]]);\n  }\n\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}","map":{"version":3,"names":["geoBounds","bounds","geoCentroid","centroid","geoInterpolate","interpolate","geoProjection","projection","abs","degrees","epsilon","radians","default","matrix","multiply","inverse","root","face","recurse","transform","node","parent","edges","faceEdges","shared","sharedEdge","m","map","project","i","n","length","pointEqual","children","forEach","child","forward","lambda","phi","point","t","hasInverse","invert","x","y","coordinates","faceInvert","faceDegrees","p","proj","stream_","stream","rotate","rotateStream","sphereStream","sphere","polygonStart","lineStart","outline","lineEnd","polygonEnd","angle","edge","multiPoint","type","notPoles","filter","d","b","inside","j","dx","c","Array","isArray","a","found","push","some"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/polyhedral/index.js"],"sourcesContent":["import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edgeâ€¦\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}