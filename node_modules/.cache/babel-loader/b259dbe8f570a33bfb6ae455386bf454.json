{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, radians, sin, sqrt } from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [k * cosPhi * sin(lambda), k * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [atan2(x * sinc, rho * sqrt(1 - sinc * sinc)), rho ? asin(y * sinc / rho) : 0];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [coordinates[0] * cosOmega / A, y / A];\n  }\n\n  forward.invert = function (x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\nexport default function () {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega); // As a multiple of radius.\n\n  p.distance = function (_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function (_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p.scale(432.147).clipAngle(acos(1 / distance) * degrees - 1e-6);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","acos","asin","atan2","cos","degrees","radians","sin","sqrt","satelliteVerticalRaw","P","forward","lambda","phi","cosPhi","k","invert","x","y","rho2","rho","sinc","satelliteRaw","omega","vertical","cosOmega","sinOmega","coordinates","A","distance","m","p","_","arguments","length","tilt","scale","clipAngle"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/satellite.js"],"sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}