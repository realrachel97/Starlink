{"ast":null,"code":"import { atan, cos, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalStereographicRaw).scale(124.75);\n}","map":{"version":3,"names":["atan","cos","tan","parallel1","cylindricalStereographicRaw","phi0","cosPhi0","forward","lambda","phi","invert","x","y","scale"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/cylindricalStereographic.js"],"sourcesContent":["import {atan, cos, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,GAAd,EAAmBC,GAAnB,QAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAEA,OAAO,SAASC,2BAAT,CAAqCC,IAArC,EAA2C;EAChD,IAAIC,OAAO,GAAGL,GAAG,CAACI,IAAD,CAAjB;;EAEA,SAASE,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8B;IAC5B,OAAO,CAACD,MAAM,GAAGF,OAAV,EAAmB,CAAC,IAAIA,OAAL,IAAgBJ,GAAG,CAACO,GAAG,GAAG,CAAP,CAAtC,CAAP;EACD;;EAEDF,OAAO,CAACG,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;IAC9B,OAAO,CAACD,CAAC,GAAGL,OAAL,EAAcN,IAAI,CAACY,CAAC,IAAI,IAAIN,OAAR,CAAF,CAAJ,GAA0B,CAAxC,CAAP;EACD,CAFD;;EAIA,OAAOC,OAAP;AACD;AAED,eAAe,YAAW;EACxB,OAAOJ,SAAS,CAACC,2BAAD,CAAT,CACFS,KADE,CACI,MADJ,CAAP;AAED"},"metadata":{},"sourceType":"module"}