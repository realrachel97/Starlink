{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOfferProjects\\\\starlink\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n    this.state = {\n      map: null\n    };\n    this.refMap = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  generateMap(land) {\n    const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n    const graticule = geoGraticule();\n    const canvas = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n    let context = canvas.node().getContext(\"2d\");\n    let path = geoPath().projection(projection).context(context);\n    land.forEach(ele => {\n      context.fillStyle = '#B3DDEF';\n      context.strokeStyle = '#000';\n      context.globalAlpha = 0.7;\n      context.beginPath();\n      path(ele);\n      context.fill();\n      context.stroke();\n      context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n      context.beginPath();\n      path(graticule());\n      context.lineWidth = 0.1;\n      context.stroke();\n      context.beginPath();\n      context.lineWidth = 0.5;\n      path(graticule.outline());\n      context.stroke();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"names":["React","Component","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","d3Scale","timeFormat","d3TimeFormat","schemeCategory10","WORLD_MAP_URL","SATELLITE_POSITION_URL","width","height","WorldMap","constructor","state","map","refMap","createRef","componentDidMount","get","then","res","data","land","objects","countries","features","generateMap","catch","e","console","log","projection","scale","translate","precision","graticule","canvas","current","attr","context","node","getContext","path","forEach","ele","fillStyle","strokeStyle","globalAlpha","beginPath","fill","stroke","lineWidth","outline","render"],"sources":["D:/LaiOfferProjects/starlink/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport { feature } from 'topojson-client';\r\nimport axios from 'axios';\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport * as d3Scale from \"d3-scale\";\r\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL } from \"../constants\";\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass WorldMap extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            map: null\r\n        }\r\n        this.refMap = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const { data } = res;\r\n                const land = feature(data, data.objects.countries).features;\r\n                this.generateMap(land);\r\n            })\r\n            .catch(e => console.log('err in fecth world map data ', e))\r\n    }\r\n\r\n    generateMap(land){\r\n        const projection = geoKavrayskiy7()\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        const graticule = geoGraticule();\r\n\r\n        const canvas = d3Select(this.refMap.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        let context = canvas.node().getContext(\"2d\");\r\n\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context);\r\n\r\n        land.forEach(ele => {\r\n            context.fillStyle = '#B3DDEF';\r\n            context.strokeStyle = '#000';\r\n            context.globalAlpha = 0.7;\r\n            context.beginPath();\r\n            path(ele);\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" ref={this.refMap} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}