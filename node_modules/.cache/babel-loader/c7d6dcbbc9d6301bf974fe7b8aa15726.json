{"ast":null,"code":"import { geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { asin, degrees, pi, sin, radians } from \"./math.js\"; // Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\n\nexport default function (raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","map":{"version":3,"names":["geoInterpolate","interpolate","geoProjection","projection","geoRotation","rotation","asin","degrees","pi","sin","radians","raw","p0","p1","i","o","a","b","distance","y","R","p","rotate","r","center","_","arguments","length","invert","clipAngle"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/twoPoint.js"],"sourcesContent":["import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math.js\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n"],"mappings":"AAAA,SAAQA,cAAc,IAAIC,WAA1B,EAAuCC,aAAa,IAAIC,UAAxD,EAAoEC,WAAW,IAAIC,QAAnF,QAAkG,QAAlG;AACA,SAAQC,IAAR,EAAcC,OAAd,EAAuBC,EAAvB,EAA2BC,GAA3B,EAAgCC,OAAhC,QAA8C,WAA9C,C,CAEA;AACA;AACA;;AACA,eAAe,UAASC,GAAT,EAAcC,EAAd,EAAkBC,EAAlB,EAAsB;EACnC,IAAIC,CAAC,GAAGb,WAAW,CAACW,EAAD,EAAKC,EAAL,CAAnB;EAAA,IACIE,CAAC,GAAGD,CAAC,CAAC,GAAD,CADT;EAAA,IAEIE,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAACU,CAAC,CAAC,CAAD,CAAH,EAAQ,CAACA,CAAC,CAAC,CAAD,CAAV,CAAD,CAAR,CAAyBH,EAAzB,CAFR;EAAA,IAGIK,CAAC,GAAGH,CAAC,CAACI,QAAF,GAAa,CAHrB;EAAA,IAIIC,CAAC,GAAG,CAACb,IAAI,CAACG,GAAG,CAACO,CAAC,CAAC,CAAD,CAAD,GAAON,OAAR,CAAH,GAAsBD,GAAG,CAACQ,CAAD,CAA1B,CAJb;EAAA,IAKIG,CAAC,GAAG,CAAC,CAACL,CAAC,CAAC,CAAD,CAAH,EAAQ,CAACA,CAAC,CAAC,CAAD,CAAV,EAAe,EAAEC,CAAC,CAAC,CAAD,CAAD,GAAO,CAAP,GAAWR,EAAE,GAAGW,CAAhB,GAAoBA,CAAtB,IAA2BZ,OAA1C,CALR;EAAA,IAMIc,CAAC,GAAGlB,UAAU,CAACQ,GAAG,CAACM,CAAD,CAAJ,CAAV,CAAmBK,MAAnB,CAA0BF,CAA1B,CANR;EAAA,IAOIG,CAAC,GAAGlB,QAAQ,CAACe,CAAD,CAPhB;EAAA,IAQII,MAAM,GAAGH,CAAC,CAACG,MARf;EAUA,OAAOH,CAAC,CAACC,MAAT;;EAEAD,CAAC,CAACG,MAAF,GAAW,UAASC,CAAT,EAAY;IACrB,OAAOC,SAAS,CAACC,MAAV,GAAmBH,MAAM,CAACD,CAAC,CAACE,CAAD,CAAF,CAAzB,GAAkCF,CAAC,CAACK,MAAF,CAASJ,MAAM,EAAf,CAAzC;EACD,CAFD;;EAIA,OAAOH,CAAC,CACHQ,SADE,CACQ,EADR,CAAP;AAED"},"metadata":{},"sourceType":"module"}