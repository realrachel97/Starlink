{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOfferProjects\\\\starlink\\\\starlink\\\\src\\\\components\\\\Main.js\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'antd';\nimport SatSetting from \"./SatSetting\";\nimport SatelliteList from \"./SatelliteList\";\nimport { BASE_URL, SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY } from \"../constants\";\nimport axios from \"axios\";\nimport WorldMap from \"./WorldMap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      setting: {},\n      satInfo: {},\n      isLoadingList: false,\n      satList: []\n    };\n\n    this.showNearbySatellite = setting => {\n      // cb fn => get settings from the SatSetting\n      this.setState({\n        setting: setting\n      }); // fetch sat list from the server\n\n      this.fetchSatellite(setting);\n    };\n\n    this.fetchSatellite = setting => {\n      // 1. get sat info from the server\n      //  - setting / reg info\n      // 2. analyze the response\n      //  - case1: success => pass results to SatList\n      //  - case2: failure => inform the user\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude\n      } = setting;\n      const url = `${BASE_URL}/${NEARBY_SATELLITE}/${latitude}/${longitude}/\n            ${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\n      this.setState({\n        isLoadingList: true\n      }); // no need to configure data info\n\n      axios.get(url).then(res => {\n        console.log(res);\n\n        if (res.status === 200) {\n          this.setState({\n            satInfo: res.data,\n            isLoadingList: false\n          });\n        }\n      }).catch(err => {\n        console.log(err.message);\n        this.setState({\n          isLoadingList: false\n        });\n      });\n    };\n\n    this.showMap = selected => {\n      console.log(selected);\n      selected;\n      this.setState(pre => {\n        return { ...pre,\n          satList: [...selected]\n        };\n      });\n    };\n  }\n\n  clearSelected() {\n    this.setState({\n      satList: []\n    });\n  }\n\n  render() {\n    const {\n      isLoadingList,\n      satInfo,\n      satList,\n      setting\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        className: \"left-side\",\n        children: [/*#__PURE__*/_jsxDEV(SatSetting, {\n          onShow: this.showNearbySatellite,\n          selected: satList,\n          onClearSelected: this.clearSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(SatelliteList, {\n          satInfo: satInfo,\n          isLoad: isLoadingList,\n          onShowMap: this.showMap\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        className: \"right-side\",\n        children: /*#__PURE__*/_jsxDEV(WorldMap, {\n          satData: satList,\n          observerData: setting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default Main;","map":{"version":3,"names":["React","Component","Col","Row","SatSetting","SatelliteList","BASE_URL","SAT_API_KEY","NEARBY_SATELLITE","STARLINK_CATEGORY","axios","WorldMap","Main","state","setting","satInfo","isLoadingList","satList","showNearbySatellite","setState","fetchSatellite","latitude","longitude","elevation","altitude","url","get","then","res","console","log","status","data","catch","err","message","showMap","selected","pre","clearSelected","render"],"sources":["D:/LaiOfferProjects/starlink/starlink/src/components/Main.js"],"sourcesContent":["import React, {Component} from 'react';\r\nimport { Col, Row } from 'antd';\r\nimport SatSetting from \"./SatSetting\";\r\nimport SatelliteList from \"./SatelliteList\";\r\nimport { BASE_URL, SAT_API_KEY, NEARBY_SATELLITE, STARLINK_CATEGORY } from \"../constants\";\r\nimport axios from \"axios\";\r\nimport WorldMap from \"./WorldMap\";\r\nclass Main extends Component {\r\n    state = {\r\n        setting: {},\r\n        satInfo: {},\r\n        isLoadingList: false,\r\n        satList: [],\r\n    }\r\n\r\n    showNearbySatellite = setting => {\r\n        // cb fn => get settings from the SatSetting\r\n        this.setState( {setting: setting});\r\n        // fetch sat list from the server\r\n        this.fetchSatellite(setting);\r\n    }\r\n\r\n    fetchSatellite = setting => {\r\n        // 1. get sat info from the server\r\n        //  - setting / reg info\r\n        // 2. analyze the response\r\n        //  - case1: success => pass results to SatList\r\n        //  - case2: failure => inform the user\r\n        const { latitude, longitude, elevation, altitude } = setting;\r\n        const url =\r\n            `${BASE_URL}/${NEARBY_SATELLITE}/${latitude}/${longitude}/\r\n            ${elevation}/${altitude}/${STARLINK_CATEGORY}/&apiKey=${SAT_API_KEY}`;\r\n\r\n        this.setState({isLoadingList: true})\r\n        // no need to configure data info\r\n        axios.get(url)\r\n            .then( res => {\r\n                console.log(res);\r\n                if (res.status === 200) {\r\n                    this.setState( {\r\n                        satInfo: res.data,\r\n                        isLoadingList: false\r\n                    })\r\n                }\r\n            })\r\n            .catch( err => {\r\n                console.log(err.message);\r\n                this.setState({isLoadingList: false})\r\n            })\r\n    }\r\n\r\n    showMap = (selected) => {\r\n        console.log(selected);\r\n        selected\r\n        this.setState( pre => {\r\n            return {\r\n                ...pre,\r\n                satList: [...selected]\r\n            }\r\n        })\r\n    }\r\n\r\n    clearSelected() {\r\n        this.setState({satList: []})\r\n    }\r\n\r\n    render() {\r\n        const { isLoadingList, satInfo, satList, setting } = this.state;\r\n\r\n        return (\r\n           <Row>\r\n               <Col span={8} className=\"left-side\">\r\n                   <SatSetting onShow={this.showNearbySatellite}\r\n                               selected = {satList}\r\n                               onClearSelected = {this.clearSelected}\r\n                   />\r\n                   <SatelliteList satInfo={satInfo}\r\n                                  isLoad={isLoadingList}\r\n                                  onShowMap={this.showMap}\r\n                   />\r\n               </Col>\r\n               <Col span={16} className=\"right-side\">\r\n                   <WorldMap satData={satList} observerData={setting}/>\r\n               </Col>\r\n           </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,MAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,gBAAhC,EAAkDC,iBAAlD,QAA2E,cAA3E;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AACA,MAAMC,IAAN,SAAmBX,SAAnB,CAA6B;EAAA;IAAA;IAAA,KACzBY,KADyB,GACjB;MACJC,OAAO,EAAE,EADL;MAEJC,OAAO,EAAE,EAFL;MAGJC,aAAa,EAAE,KAHX;MAIJC,OAAO,EAAE;IAJL,CADiB;;IAAA,KAQzBC,mBARyB,GAQHJ,OAAO,IAAI;MAC7B;MACA,KAAKK,QAAL,CAAe;QAACL,OAAO,EAAEA;MAAV,CAAf,EAF6B,CAG7B;;MACA,KAAKM,cAAL,CAAoBN,OAApB;IACH,CAbwB;;IAAA,KAezBM,cAfyB,GAeRN,OAAO,IAAI;MACxB;MACA;MACA;MACA;MACA;MACA,MAAM;QAAEO,QAAF;QAAYC,SAAZ;QAAuBC,SAAvB;QAAkCC;MAAlC,IAA+CV,OAArD;MACA,MAAMW,GAAG,GACJ,GAAEnB,QAAS,IAAGE,gBAAiB,IAAGa,QAAS,IAAGC,SAAU;AACrE,cAAcC,SAAU,IAAGC,QAAS,IAAGf,iBAAkB,YAAWF,WAAY,EAFxE;MAIA,KAAKY,QAAL,CAAc;QAACH,aAAa,EAAE;MAAhB,CAAd,EAXwB,CAYxB;;MACAN,KAAK,CAACgB,GAAN,CAAUD,GAAV,EACKE,IADL,CACWC,GAAG,IAAI;QACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ;;QACA,IAAIA,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;UACpB,KAAKZ,QAAL,CAAe;YACXJ,OAAO,EAAEa,GAAG,CAACI,IADF;YAEXhB,aAAa,EAAE;UAFJ,CAAf;QAIH;MACJ,CATL,EAUKiB,KAVL,CAUYC,GAAG,IAAI;QACXL,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,OAAhB;QACA,KAAKhB,QAAL,CAAc;UAACH,aAAa,EAAE;QAAhB,CAAd;MACH,CAbL;IAcH,CA1CwB;;IAAA,KA4CzBoB,OA5CyB,GA4CdC,QAAD,IAAc;MACpBR,OAAO,CAACC,GAAR,CAAYO,QAAZ;MACAA,QAAQ;MACR,KAAKlB,QAAL,CAAemB,GAAG,IAAI;QAClB,OAAO,EACH,GAAGA,GADA;UAEHrB,OAAO,EAAE,CAAC,GAAGoB,QAAJ;QAFN,CAAP;MAIH,CALD;IAMH,CArDwB;EAAA;;EAuDzBE,aAAa,GAAG;IACZ,KAAKpB,QAAL,CAAc;MAACF,OAAO,EAAE;IAAV,CAAd;EACH;;EAEDuB,MAAM,GAAG;IACL,MAAM;MAAExB,aAAF;MAAiBD,OAAjB;MAA0BE,OAA1B;MAAmCH;IAAnC,IAA+C,KAAKD,KAA1D;IAEA,oBACG,QAAC,GAAD;MAAA,wBACI,QAAC,GAAD;QAAK,IAAI,EAAE,CAAX;QAAc,SAAS,EAAC,WAAxB;QAAA,wBACI,QAAC,UAAD;UAAY,MAAM,EAAE,KAAKK,mBAAzB;UACY,QAAQ,EAAID,OADxB;UAEY,eAAe,EAAI,KAAKsB;QAFpC;UAAA;UAAA;UAAA;QAAA,QADJ,eAKI,QAAC,aAAD;UAAe,OAAO,EAAExB,OAAxB;UACe,MAAM,EAAEC,aADvB;UAEe,SAAS,EAAE,KAAKoB;QAF/B;UAAA;UAAA;UAAA;QAAA,QALJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAWI,QAAC,GAAD;QAAK,IAAI,EAAE,EAAX;QAAe,SAAS,EAAC,YAAzB;QAAA,uBACI,QAAC,QAAD;UAAU,OAAO,EAAEnB,OAAnB;UAA4B,YAAY,EAAEH;QAA1C;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADH;EAiBH;;AA/EwB;;AAkF7B,eAAeF,IAAf"},"metadata":{},"sourceType":"module"}