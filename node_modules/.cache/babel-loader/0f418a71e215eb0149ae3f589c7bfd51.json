{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, halfPi, pi, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\"; // Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n      q = cos(phi),\n      s = sign(lambda);\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n  var b = pi / (2 * lambda) - 2 * lambda / pi,\n      c = 2 * phi / pi,\n      d = (1 - c * c) / (sinPhi - c);\n  var b2 = b * b,\n      d2 = d * d,\n      b2d2 = 1 + b2 / d2,\n      d2b2 = 1 + d2 / b2;\n  var M = (b * sinPhi / d - b / 2) / b2d2,\n      N = (d2 * sinPhi / b2 + d / 2) / d2b2,\n      m = M * M + q * q / b2d2,\n      n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;\n  return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];\n}\n\nnicolosiRaw.invert = function (x, y) {\n  x /= halfPi;\n  y /= halfPi;\n  var x2 = x * x,\n      y2 = y * y,\n      x2y2 = x2 + y2,\n      pi2 = pi * pi;\n  return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {\n    return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;\n  }, 0)];\n};\n\nexport default function () {\n  return projection(nicolosiRaw).scale(127.267);\n}","map":{"version":3,"names":["geoProjection","projection","abs","cos","halfPi","pi","sign","sin","sqrt","solve","nicolosiRaw","lambda","phi","sinPhi","q","s","b","c","d","b2","d2","b2d2","d2b2","M","N","m","n","invert","x","y","x2","y2","x2y2","pi2","scale"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/nicolosi.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}