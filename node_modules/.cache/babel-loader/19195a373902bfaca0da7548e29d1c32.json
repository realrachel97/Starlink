{"ast":null,"code":"var _jsxFileName = \"D:\\\\LaiOfferProjects\\\\starlink\\\\starlink\\\\src\\\\components\\\\WorldMap.js\";\nimport React, { Component, createRef } from 'react';\nimport { feature } from 'topojson-client';\nimport axios from 'axios';\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\nimport { geoGraticule, geoPath } from 'd3-geo';\nimport { select as d3Select } from 'd3-selection';\nimport * as d3Scale from \"d3-scale\";\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 960;\nconst height = 600;\n\nclass WorldMap extends Component {\n  constructor() {\n    super();\n\n    this.track = data => {\n      if (!data[0].hasOwnProperty(\"positions\")) {\n        throw new Error(\"no position data\");\n        return;\n      }\n\n      const len = data[0].positions.length;\n      const {\n        duration\n      } = this.props.observerData;\n      const {\n        context2\n      } = this.map; // current time\n\n      let now = new Date();\n      let i = 0;\n      let timer = setInterval(() => {\n        // current time\n        let ct = new Date(); // i represent which one it is\n\n        let timePassed = i === 0 ? 0 : ct - now;\n        let time = new Date(now.getTime() + 60 * timePassed);\n        context2.clearRect(0, 0, width, height);\n        context2.font = \"bold 14px sans-serif\";\n        context2.fillStyle = \"#333\";\n        context2.textAlign = \"center\";\n        context2.fillText(d3TimeFormat(time), width / 2, 10);\n\n        if (i >= len) {\n          clearInterval(timer);\n          this.setState({\n            isDrawing: false\n          });\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"\";\n          return;\n        }\n\n        data.forEach(sat => {\n          const {\n            info,\n            positions\n          } = sat;\n          this.drawSat(info, positions[i]);\n        });\n        i += 60;\n      }, 1000);\n    };\n\n    this.drawSat = (sat, pos) => {\n      const {\n        satlongitude,\n        satlatitude\n      } = pos;\n      if (!satlongitude || !satlatitude) return;\n      const {\n        satname\n      } = sat;\n      const nameWithNumber = satname.match(/\\d+/g).join(\"\");\n      const {\n        projection,\n        context2\n      } = this.map;\n      const xy = projection([satlongitude, satlatitude]);\n      context2.fillStyle = this.color(nameWithNumber);\n      context2.beginPath();\n      context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\n      context2.fill();\n      context2.font = \"bold 11px sans-serif\";\n      context2.textAlign = \"center\";\n      context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\n    };\n\n    this.generateMap = land => {\n      const projection = geoKavrayskiy7().scale(170).translate([width / 2, height / 2]).precision(.1);\n      const graticule = geoGraticule();\n      const canvas1 = d3Select(this.refMap.current).attr(\"width\", width).attr(\"height\", height);\n      const canvas2 = d3Select(this.refTrack.current).attr(\"width\", width).attr(\"height\", height);\n      let context1 = canvas1.node().getContext(\"2d\");\n      let context2 = canvas2.node().getContext(\"2d\");\n      let path = geoPath().projection(projection).context(context1);\n      land.forEach(ele => {\n        context1.fillStyle = '#B3DDEF';\n        context1.strokeStyle = '#000';\n        context1.globalAlpha = 0.7;\n        context1.beginPath();\n        path(ele);\n        context1.fill();\n        context1.stroke();\n        context1.strokeStyle = 'rgba(220, 220, 220, 0.1)';\n        context1.beginPath();\n        path(graticule());\n        context1.lineWidth = 0.1;\n        context1.stroke();\n        context1.beginPath();\n        context1.lineWidth = 0.5;\n        path(graticule.outline());\n        context1.stroke();\n      });\n    };\n\n    this.state = {\n      isLoading: false,\n      isDrawing: false\n    };\n    this.map = null;\n    this.color = d3Scale.scaleOrdinal(schemeCategory10);\n    this.refTrack = /*#__PURE__*/createRef();\n    this.refMap = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get(WORLD_MAP_URL).then(res => {\n      const {\n        data\n      } = res;\n      const land = feature(data, data.objects.countries).features;\n      this.generateMap(land);\n    }).catch(e => console.log('err in fecth world map data ', e));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.satData !== this.props.satData) {\n      const {\n        latitude,\n        longitude,\n        elevation,\n        altitude,\n        duration\n      } = this.props.observerData;\n      const endTime = duration * 60;\n      this.setState({\n        isLoading: true\n      });\n      const urls = this.props.satData.map(sat => {\n        const {\n          satid\n        } = sat;\n        const url = `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\n        return axios.get(url);\n      });\n      Promise.all(urls).then(res => {\n        const arr = res.map(sat => sat.data);\n        this.setState({\n          isLoading: false,\n          isDrawing: true\n        });\n\n        if (!prevState.isDrawing) {\n          this.track(arr);\n        } else {\n          const oHint = document.getElementsByClassName(\"hint\")[0];\n          oHint.innerHTML = \"Please wait for these satellite animation to finish before selection new ones!\";\n        }\n      }).catch(e => {\n        console.log(\"err in fetch satellite position -> \", e.message);\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"map\",\n        ref: this.refMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"track\",\n        ref: this.refTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WorldMap;","map":{"version":3,"names":["React","Component","createRef","feature","axios","geoKavrayskiy7","geoGraticule","geoPath","select","d3Select","d3Scale","timeFormat","d3TimeFormat","schemeCategory10","WORLD_MAP_URL","SATELLITE_POSITION_URL","SAT_API_KEY","width","height","WorldMap","constructor","track","data","hasOwnProperty","Error","len","positions","length","duration","props","observerData","context2","map","now","Date","i","timer","setInterval","ct","timePassed","time","getTime","clearRect","font","fillStyle","textAlign","fillText","clearInterval","setState","isDrawing","oHint","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","satname","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","scale","translate","precision","graticule","canvas1","refMap","current","attr","canvas2","refTrack","context1","node","getContext","path","context","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","state","isLoading","scaleOrdinal","componentDidMount","get","then","res","objects","countries","features","catch","e","console","log","componentDidUpdate","prevProps","prevState","snapshot","satData","latitude","longitude","elevation","altitude","endTime","urls","satid","url","Promise","all","arr","message","render"],"sources":["D:/LaiOfferProjects/starlink/starlink/src/components/WorldMap.js"],"sourcesContent":["import React, {Component, createRef} from 'react';\r\nimport { feature } from 'topojson-client';\r\nimport axios from 'axios';\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport * as d3Scale from \"d3-scale\";\r\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from \"../constants\";\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass WorldMap extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            isLoading: false,\r\n            isDrawing: false\r\n        }\r\n        this.map = null;\r\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\r\n        this.refTrack = createRef();\r\n        this.refMap = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const { data } = res;\r\n                const land = feature(data, data.objects.countries).features;\r\n                this.generateMap(land);\r\n            })\r\n            .catch(e => console.log('err in fecth world map data ', e))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.satData !== this.props.satData) {\r\n            const {\r\n                latitude,\r\n                longitude,\r\n                elevation,\r\n                altitude,\r\n                duration\r\n            } = this.props.observerData;\r\n\r\n            const endTime = duration * 60;\r\n\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n\r\n            const urls = this.props.satData.map( sat => {\r\n                const { satid } = sat;\r\n                const url =\r\n                    `/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n                return axios.get(url);\r\n            })\r\n\r\n            Promise.all(urls)\r\n                .then(res => {\r\n                    const arr = res.map(sat => sat.data);\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        isDrawing: true\r\n                    });\r\n\r\n                    if (!prevState.isDrawing) {\r\n                        this.track(arr);\r\n                    } else {\r\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                        oHint.innerHTML =\r\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    console.log(\"err in fetch satellite position -> \", e.message);\r\n                });\r\n        }\r\n    }\r\n\r\n    track = data => {\r\n        if (!data[0].hasOwnProperty(\"positions\")) {\r\n            throw new Error(\"no position data\");\r\n            return;\r\n        }\r\n\r\n        const len = data[0].positions.length;\r\n        const { duration } = this.props.observerData;\r\n        const { context2 } = this.map;\r\n\r\n        // current time\r\n        let now = new Date();\r\n\r\n        let i = 0;\r\n\r\n        let timer = setInterval(() => {\r\n            // current time\r\n            let ct = new Date();\r\n            // i represent which one it is\r\n            let timePassed = i === 0 ? 0 : ct - now;\r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n\r\n            context2.clearRect(0, 0, width, height);\r\n\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\r\n\r\n            if (i >= len) {\r\n                clearInterval(timer);\r\n                this.setState({ isDrawing: false });\r\n                const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                oHint.innerHTML = \"\";\r\n                return;\r\n            }\r\n\r\n            data.forEach(sat => {\r\n                const { info, positions } = sat;\r\n                this.drawSat(info, positions[i]);\r\n            });\r\n\r\n            i += 60;\r\n        }, 1000);\r\n    };\r\n\r\n    drawSat = (sat, pos) => {\r\n        const { satlongitude, satlatitude } = pos;\r\n\r\n        if (!satlongitude || !satlatitude) return;\r\n\r\n        const { satname } = sat;\r\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\r\n\r\n        const { projection, context2 } = this.map;\r\n        const xy = projection([satlongitude, satlatitude]);\r\n\r\n        context2.fillStyle = this.color(nameWithNumber);\r\n        context2.beginPath();\r\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\r\n        context2.fill();\r\n\r\n        context2.font = \"bold 11px sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"map-box\">\r\n                <canvas className=\"map\" ref={this.refMap} />\r\n                <canvas className=\"track\" ref={this.refTrack}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateMap = land => {\r\n        const projection = geoKavrayskiy7()\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        const graticule = geoGraticule();\r\n\r\n        const canvas1 = d3Select(this.refMap.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const canvas2 = d3Select(this.refTrack.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        let context1 = canvas1.node().getContext(\"2d\");\r\n        let context2 = canvas2.node().getContext(\"2d\");\r\n\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context1);\r\n\r\n        land.forEach(ele => {\r\n            context1.fillStyle = '#B3DDEF';\r\n            context1.strokeStyle = '#000';\r\n            context1.globalAlpha = 0.7;\r\n            context1.beginPath();\r\n            path(ele);\r\n            context1.fill();\r\n            context1.stroke();\r\n\r\n            context1.strokeStyle = 'rgba(220, 220, 220, 0.1)';\r\n            context1.beginPath();\r\n            path(graticule());\r\n            context1.lineWidth = 0.1;\r\n            context1.stroke();\r\n\r\n            context1.beginPath();\r\n            context1.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context1.stroke();\r\n        })\r\n    }\r\n}\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}