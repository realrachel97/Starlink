{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2 } from \"./math.js\";\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi),\n      i = 30,\n      delta;\n\n  do {\n    phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return phi / 2;\n}\nexport function mollweideBromleyRaw(cx, cy, cp) {\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\nexport default function () {\n  return projection(mollweideRaw).scale(169.529);\n}","map":{"version":3,"names":["geoProjection","projection","abs","asin","cos","epsilon","halfPi","pi","sin","sqrt2","mollweideBromleyTheta","cp","phi","cpsinPhi","i","delta","mollweideBromleyRaw","cx","cy","forward","lambda","invert","x","y","mollweideRaw","scale"],"sources":["D:/LaiOfferProjects/starlink/starlink/node_modules/d3-geo-projection/src/mollweide.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAzB,QAA0C,QAA1C;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,GAAnB,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,EAAzC,EAA6CC,GAA7C,EAAkDC,KAAlD,QAA8D,WAA9D;AAEA,OAAO,SAASC,qBAAT,CAA+BC,EAA/B,EAAmCC,GAAnC,EAAwC;EAC7C,IAAIC,QAAQ,GAAGF,EAAE,GAAGH,GAAG,CAACI,GAAD,CAAvB;EAAA,IAA8BE,CAAC,GAAG,EAAlC;EAAA,IAAsCC,KAAtC;;EACA;IAAGH,GAAG,IAAIG,KAAK,GAAG,CAACH,GAAG,GAAGJ,GAAG,CAACI,GAAD,CAAT,GAAiBC,QAAlB,KAA+B,IAAIT,GAAG,CAACQ,GAAD,CAAtC,CAAf;EAAH,SACOV,GAAG,CAACa,KAAD,CAAH,GAAaV,OAAb,IAAwB,EAAES,CAAF,GAAM,CADrC;;EAEA,OAAOF,GAAG,GAAG,CAAb;AACD;AAED,OAAO,SAASI,mBAAT,CAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCP,EAArC,EAAyC;EAE9C,SAASQ,OAAT,CAAiBC,MAAjB,EAAyBR,GAAzB,EAA8B;IAC5B,OAAO,CAACK,EAAE,GAAGG,MAAL,GAAchB,GAAG,CAACQ,GAAG,GAAGF,qBAAqB,CAACC,EAAD,EAAKC,GAAL,CAA5B,CAAlB,EAA0DM,EAAE,GAAGV,GAAG,CAACI,GAAD,CAAlE,CAAP;EACD;;EAEDO,OAAO,CAACE,MAAR,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;IAC9B,OAAOA,CAAC,GAAGpB,IAAI,CAACoB,CAAC,GAAGL,EAAL,CAAR,EAAkB,CAACI,CAAC,IAAIL,EAAE,GAAGb,GAAG,CAACmB,CAAD,CAAZ,CAAF,EAAoBpB,IAAI,CAAC,CAAC,IAAIoB,CAAJ,GAAQf,GAAG,CAAC,IAAIe,CAAL,CAAZ,IAAuBZ,EAAxB,CAAxB,CAAzB;EACD,CAFD;;EAIA,OAAOQ,OAAP;AACD;AAED,OAAO,IAAIK,YAAY,GAAGR,mBAAmB,CAACP,KAAK,GAAGH,MAAT,EAAiBG,KAAjB,EAAwBF,EAAxB,CAAtC;AAEP,eAAe,YAAW;EACxB,OAAON,UAAU,CAACuB,YAAD,CAAV,CACFC,KADE,CACI,OADJ,CAAP;AAED"},"metadata":{},"sourceType":"module"}