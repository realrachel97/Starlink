[{"D:\\LaiOfferProjects\\starlink\\starlink\\src\\index.js":"1","D:\\LaiOfferProjects\\starlink\\starlink\\src\\reportWebVitals.js":"2","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\App.js":"3","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Header.js":"4","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Footer.js":"5","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Main.js":"6","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\SatSetting.js":"7","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\SatelliteList.js":"8","D:\\LaiOfferProjects\\starlink\\starlink\\src\\constants.js":"9","D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\WorldMap.js":"10"},{"size":503,"mtime":1660790876765,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1660788944396,"results":"13","hashOfConfig":"12"},{"size":260,"mtime":1660791814576,"results":"14","hashOfConfig":"12"},{"size":460,"mtime":1660790617820,"results":"15","hashOfConfig":"12"},{"size":304,"mtime":1660791239991,"results":"16","hashOfConfig":"12"},{"size":2664,"mtime":1662169334511,"results":"17","hashOfConfig":"12"},{"size":3962,"mtime":1662169475970,"results":"18","hashOfConfig":"12"},{"size":3132,"mtime":1662167519263,"results":"19","hashOfConfig":"12"},{"size":396,"mtime":1661391564246,"results":"20","hashOfConfig":"12"},{"size":7534,"mtime":1662136266048,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"4sjvnq",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},"D:\\LaiOfferProjects\\starlink\\starlink\\src\\index.js",[],[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\reportWebVitals.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\App.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Header.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Footer.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\Main.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\SatSetting.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\SatelliteList.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\constants.js",[],[],"D:\\LaiOfferProjects\\starlink\\starlink\\src\\components\\WorldMap.js",["54","55","56"],[],"import React, {Component, createRef} from 'react';\r\nimport { feature } from 'topojson-client';\r\nimport axios from 'axios';\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport * as d3Scale from \"d3-scale\";\r\nimport { timeFormat as d3TimeFormat } from \"d3-time-format\";\r\nimport { schemeCategory10 } from \"d3-scale-chromatic\";\r\nimport {WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY, BASE_URL} from \"../constants\";\r\nimport {Spin} from \"antd\";\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass WorldMap extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            isLoading: false,\r\n            isDrawing: false\r\n        }\r\n        this.map = null;\r\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\r\n        this.refTrack = createRef();\r\n        this.refMap = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const { data } = res;\r\n                // transform topjson to d3 data\r\n                const land = feature(data, data.objects.countries).features;\r\n                this.generateMap(land);\r\n            })\r\n            .catch(e => console.log('err in fecth world map data ', e))\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.satData !== this.props.satData) {\r\n            const {\r\n                latitude,\r\n                longitude,\r\n                elevation,\r\n                altitude,\r\n                duration\r\n            } = this.props.observerData;\r\n\r\n            const endTime = duration * 60;\r\n\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n\r\n        const urls = this.props.satData.map( sat => {\r\n                const { satid } = sat;\r\n                const url =\r\n                    `${BASE_URL}/api/${SATELLITE_POSITION_URL}/${satid}/${latitude}/${longitude}/${elevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n                return axios.get(url);\r\n            })\r\n\r\n            // ensure the satellite list is in order\r\n            Promise.all(urls)\r\n                .then(res => {\r\n                    const arr = res.map(sat => sat.data);\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        isDrawing: true\r\n                    });\r\n\r\n                    if (!prevState.isDrawing) {\r\n                        this.track(arr);\r\n                    } else {\r\n                        const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                        oHint.innerHTML =\r\n                            \"Please wait for these satellite animation to finish before selection new ones!\";\r\n                    }\r\n                })\r\n                .catch(e => {\r\n                    console.log(\"err in fetch satellite position -> \", e.message);\r\n                    this.setState({isLoading: false})\r\n                });\r\n        }\r\n    }\r\n\r\n    track = data => {\r\n        if (!data[0].hasOwnProperty(\"positions\")) {\r\n            throw new Error(\"no position data\");\r\n            return;\r\n        }\r\n\r\n        const len = data[0].positions.length;\r\n        const { duration } = this.props.observerData;\r\n        const { context2 } = this.map;\r\n\r\n        // current time\r\n        let now = new Date();\r\n\r\n        let i = 0;\r\n\r\n        let timer = setInterval(() => {\r\n            // current time\r\n            let ct = new Date();\r\n            // i represent which one it is\r\n            let timePassed = i === 0 ? 0 : ct - now;\r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n\r\n            context2.clearRect(0, 0, width, height);\r\n\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\r\n\r\n            if (i >= len) {\r\n                clearInterval(timer);\r\n                this.setState({ isDrawing: false });\r\n                const oHint = document.getElementsByClassName(\"hint\")[0];\r\n                oHint.innerHTML = \"\";\r\n                return;\r\n            }\r\n\r\n            data.forEach(sat => {\r\n                const { info, positions } = sat;\r\n                this.drawSat(info, positions[i]);\r\n            });\r\n\r\n            i += 60;\r\n        }, 1000);\r\n    };\r\n\r\n    drawSat = (sat, pos) => {\r\n        const { satlongitude, satlatitude } = pos;\r\n\r\n        if (!satlongitude || !satlatitude) return;\r\n\r\n        const { satname } = sat;\r\n        // we only need the satellite number\r\n        // \\d+: we need the digits\r\n        // join: turn an array into a string\r\n        // /g: all\r\n        const nameWithNumber = satname.match(/\\d+/g).join(\"\");\r\n\r\n        const { projection, context2 } = this.map;\r\n        // the exact point position on the world map (from longitude & latitude to where need to be located)\r\n        const xy = projection([satlongitude, satlatitude]);\r\n\r\n        context2.fillStyle = this.color(nameWithNumber);\r\n        context2.beginPath();\r\n        // draw round\r\n        context2.arc(xy[0], xy[1], 4, 0, 2 * Math.PI);\r\n        context2.fill();\r\n\r\n        context2.font = \"bold 11px sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.fillText(nameWithNumber, xy[0], xy[1] + 14);\r\n    };\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        return (\r\n            <div className=\"map-box\">\r\n                {\r\n                    isLoading ? (\r\n                            <div className=\"spinner\">\r\n                                <Spin tip=\"Loading...\" size=\"large\"/>\r\n                            </div>\r\n                        ) : null\r\n                }\r\n                <canvas className=\"map\" ref={this.refMap} />\r\n                <canvas className=\"track\" ref={this.refTrack}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateMap = land => {\r\n        const projection = geoKavrayskiy7()\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        const graticule = geoGraticule();\r\n\r\n        const canvas1 = d3Select(this.refMap.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const canvas2 = d3Select(this.refTrack.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        let context1 = canvas1.node().getContext(\"2d\");\r\n        let context2 = canvas2.node().getContext(\"2d\");\r\n\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context1);\r\n\r\n        land.forEach(ele => {\r\n            context1.fillStyle = '#B3DDEF';\r\n            context1.strokeStyle = '#000';\r\n            context1.globalAlpha = 0.7;\r\n            context1.beginPath();\r\n            path(ele);\r\n            context1.fill();\r\n            context1.stroke();\r\n\r\n            context1.strokeStyle = 'rgba(220, 220, 220, 0.1)';\r\n            context1.beginPath();\r\n            path(graticule());\r\n            context1.lineWidth = 0.1;\r\n            context1.stroke();\r\n\r\n            context1.beginPath();\r\n            context1.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context1.stroke();\r\n        })\r\n\r\n        this.map = {\r\n            projection: projection,\r\n            graticule: graticule,\r\n            context1: context1,\r\n            context2: context2\r\n        }\r\n    }\r\n}\r\n\r\nexport default WorldMap;\r\n",{"ruleId":"57","severity":1,"message":"58","line":46,"column":17,"nodeType":"59","messageId":"60","endLine":46,"endColumn":25},{"ruleId":"61","severity":1,"message":"62","line":90,"column":13,"nodeType":"63","messageId":"64","endLine":90,"endColumn":20},{"ruleId":"57","severity":1,"message":"65","line":94,"column":17,"nodeType":"59","messageId":"60","endLine":94,"endColumn":25},"no-unused-vars","'altitude' is assigned a value but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'duration' is assigned a value but never used."]